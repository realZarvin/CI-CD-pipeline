name: CI/CD Pipeline


on:
  # Trigger the workflow on pushes and pull requests to the 'main' branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Check out the repository code

    - name: Set up Rust
      uses: actions/setup-rust@v1
      with:
        rust-version: 1.72  # Set up the Rust environment with the specified version

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build the project
      run: cargo build --release  # Compile the Rust application in release mode

    - name: Run unit tests
      run: cargo test  # Execute unit tests to verify the code works as expected

    - name: Build Docker image
      run: docker build -t myapp:latest .  # Build the Docker image from the Dockerfile

    - name: Run integration tests
      run: |
        docker-compose up -d  # Start Docker containers in detached mode
        cargo test --test integration_tests  # Run integration tests against the running application
        docker-compose down  # Stop and remove Docker containers after tests


  deploy:
    name: Deploy
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for deployment
    needs: build  # Ensure the build job completes successfully before deploying

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Check out the repository code

    - name: Build Docker image
      run: docker build -t myapp:latest .  # Build the Docker image from the Dockerfile

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password

    - name: Push Docker image to Docker Hub
      run: docker push myapp:latest  # Push the Docker image to Docker Hub

    - name: Deploy to Server
      run: |
        ssh user@server "docker pull myapp:latest && docker-compose -f /path/to/docker-compose.yml up -d"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH private key for server access
        
